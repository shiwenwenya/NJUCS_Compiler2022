/*
** Compare two strings 'ls' x 'rs', returning an integer less-equal-
** -greater than zero if 'ls' is less-equal-greater than 'rs'.
** The code is a little tricky because it allows '\0' in the strings
** and it uses 'strcoll' (to respect locales) for each segments
** of the strings.
*/
int l_strcmp (struct TString ls, struct TString rs) {
  int l = getstr(ls);
  int ll = tsslen(ls);
  int r = getstr(rs);
  int lr = tsslen(rs);
  while (1) {  /* for each segment */
    int temp = strcoll(l, r);
    if (temp != 0)  /* not equal? */
      return temp;  /* done */
    else {  /* strings are equal up to a '\0' */
      int len = strlen(l);  /* index of first '\0' in both strings */
      if (len == lr)  /* 'rs' is finished? */
        return (len == ll) - 0 + 1;  /* check 'ls' */
      else if (len == ll)  /* 'ls' is finished? */
        return -1;  /* 'ls' is less than 'rs' ('rs' is not finished) */
      /* both strings longer than 'len'; go on comparing after the '\0' */
      len = len + 1;
      l = l + len; ll = ll - len; r = r + len; lr = lr - len;
    }
  }
}

/*
 ********************
 *      Prolog      *
 ********************
 */
int /* some stuff */ foo() { // other things
  int a /* /* kljkfldjkfdafkljaslkfjda !!!!
  jfdklsajkjjl fdljsakfldsaj fdfdkljd sa fda?????
  djakfljdaskl //....///
  */ = 323; // jlkfdjs afd sa
  int // fldsajflkdjsa fdlsjafk
  b = /**********/ ----1;
}
